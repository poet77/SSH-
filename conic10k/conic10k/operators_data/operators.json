{
        "Coordinate": "Coordinate(p: Point) -> (Number, Number): Coordinate of point p in the two-dimensional coordinate system.",
        "XCoordinate": "XCoordinate(p: Point) -> Number: X-coordinate of point p in the two-dimensional coordinate system.",
        "YCoordinate": "YCoordinate(p: Point) -> Number: Y-coordinate of point p in the two-dimensional coordinate system.",
        "LocusEquation": "LocusEquation(p: Point) -> Expression: Locus equation of point p.",
        "Locus": "Locus(p: Point) -> Curve: Locus of point p.",
        "Quadrant": "Quadrant(p: Point) -> Number: The quadrant where point p is located.",
        "Focus": "Focus(c: ConicSection) -> Union[Set[point], Point]: The focus of conic curve c. If there are multiple focuses, the set is returned, otherwise the point is returned.",
        "RightFocus": "RightFocus(c: ConicSection) -> Point: The right focus of conic curve c.",
        "LeftFocus": "LeftFocus(c: ConicSection) -> Point: The left focus of conic curve c.",
        "LowerFocus": "LowerFocus(c: ConicSection) -> Point: The lower focus of conic c.",
        "UpperFocus": "UpperFocus(c: ConicSection) -> Point: The upper focus of conic c.",
        "FocalLength": "FocalLength(c: ConicSection) -> Number: The focal length of conic c.",
        "HalfFocalLength": "HalfFocalLength(c: ConicSection) -> Number: The half focal length of conic c.",
        "SymmetryAxis": "SymmetryAxis(c: ConicSection) -> Axis: The axis of symmetry of conic c.",
        "Eccentricity": "Eccentricity(c: ConicSection) -> Number: The eccentricity of conic c.",
        "Vertex": "Vertex(c: ConicSection) -> Union[Set[Point], Point]: The vertex of conic c. If there are multiple vertices, a set is returned, otherwise the point is returned.",
        "UpperVertex": "UpperVertex(c: Union[Ellipse,Hyperbola]) -> Point: The upper vertex of ellipse or hyperbola c.",
        "LowerVertex": "LowerVertex(c: Union[Ellipse,Hyperbola]) -> Point: The lower vertex of ellipse or hyperbola c.",
        "LeftVertex": "LeftVertex(c: Union[Ellipse, Hyperbola]) -> Point: The left vertex of ellipse or hyperbola c.",
        "RightVertex": "RightVertex(c: Union[Ellipse, Hyperbola]) -> Point: The right vertex of ellipse or hyperbola c.",
        "Directrix": "Directrix(c: ConicSection) -> Union[Set[Line], Line]: The directrix of conic section c. If there are multiple directrixes, a set is returned, otherwise the directrix is ​​returned.",
        "LeftDirectrix": "LeftDirectrix(c: ConicSection) -> Line: The left directrix of conic section c.",
        "RightDirectrix": "RightDirectrix(c: ConicSection) -> Line: The right directrix of conic section c.",
        "MajorAxis": "MajorAxis(g: Ellipse) -> LineSegment: The major axis of ellipse g.",
        "MinorAxis": "MinorAxis(g: Ellipse) -> LineSegment: The minor axis of ellipse g.",
        "RealAxis": "RealAxis(c: Hyperbola) -> LineSegment: The real axis of the hyperbola c.",
        "ImageinaryAxis": "ImageinaryAxis(c: Hyperbola) -> LineSegment: The imaginary axis of the hyperbola c.",
        "LeftPart": "LeftPart(c: Hyperbola) -> Curve: The left part of the hyperbola c.",
        "RightPart": "RightPart(c: Hyperbola) -> Curve: The right part of the hyperbola c.",
        "Asymptote": "Asymptote(c: Hyperbola) -> Set[Line]: The two asymptotes of the hyperbola c.",
        "Diameter": "Diameter(c: Circle) -> Number: The diameter of the circle c.",
        "Radius": "Radius(c: Circle) -> Number: The radius of the circle c.",
        "Perimeter": "Perimeter(c: Union[Circle, Ellipse, Triangle]) -> Number: The circumference of the circle c.",
        "Center": "Center(c: Union[Circle, Ellipse]) -> Point: The center point of the circle or ellipse c.",
        "Expression": "Expression(c: Curve): The equation of the curve c.",
        "LineOf": "LineOf(p1: Point, p2: Point) -> Line: A straight line passing through points p1 and p2.",
        "Slope": "Slope(l: Line) -> Number: The slope of line l.",
        "Inclination": "Inclination(l: Line) -> Number: The inclination angle of line l.",
        "Intercept": "Intercept(l: Line, a: Union[xAxis, yAxis]) -> Number: The intercept of line l on the coordinate axis.",
        "LineSegmentOf": "LineSegmentOf(p1: Point, p2: Point) -> LineSegment: The line segment connecting points p1 and p2.",
        "Length": "Length(l: LineSegment) -> Number: The length of line segment l.",
        "MidPoint": "MidPoint(l: LineSegment) -> Point: The midpoint of line segment l.",
        "OverlappingLine": "OverlappingLine(l: LineSegment) -> Line: The line on which line segment l lies.",
        "PerpendicularBisector": "PerpendicularBisector(l: LineSegment) -> Line: The perpendicular bisector of line segment l.",
        "Endpoint": "Endpoint(l: Union[LineSegment, Ray]) -> Union[Set[Point], Point]: The endpoint of a line segment or ray l. If there are multiple endpoints, a set is returned, otherwise the point is returned.",
        "Projection": "Projection(p: Point, l: Union[Line, Axis]) -> Point: The projection of point p on l.",
        "InterceptChord": "InterceptChord(l: Line, c: ConicSection) -> LineSegment: The line segment of line l intercepted by conic section c.",
        "TriangleOf": "TriangleOf(p1: Point, p2: Point, p3: Point) -> Triangle: The triangle with p1, p2, and p3 as vertices.",
        "InscribedCircle": "InscribedCircle(t: Triangle) -> Circle: The incircle of triangle t.",
        "CircumCircle": "CircumCircle(t: Triangle) -> Circle: The circumcircle of triangle t.",
        "Incenter": "Incenter(t: Triangle) -> Point: The incenter of triangle t.",
        "Orthocenter": "Orthocenter(t: Triangle) -> Point: The orthocenter of triangle t.",
        "Circumcenter": "Circumcenter(t: Triangle) -> Point: The circumcenter of triangle t.",
        "AngleOf": "AngleOf(p1: Point, p2: Point, p3: Point) -> Number: The angle value of ∠p1p2p3 with p2 as the vertex.",
        "VectorOf": "VectorOf(p1: Point, p2: Point) -> Vector: The vector from point p1 to point p2.",
        "DotProduct": "DotProduct(v1: Vector, v2: Vector) -> Number: The dot product of vector v1 and vector v2.",
        "NumIntersection": "NumIntersection(a: Union[Axis, Curve], b: Union[Axis, Curve]) -> Number: The number of intersections of a and b.",
        "Intersection": "Intersection(a: Union[Axis, Curve], b: Union[Axis, Curve]) -> Union[Set[point], Point]: The intersection of a and b. If there are multiple intersections, return the set, otherwise return the point.",
        "FootPoint": "FootPoint(l1: Union[Line, LineSegment], l2: Union[Line, LineSegment]) -> Point: Line l1 and line l2 are perpendicular to each other, get their foot.",
        "Distance": "Distance(a: Union[Point, Line], b: Union[Point, Line]) -> Number: The distance between a and b.",
        "Area": "Area(c: Union[Circle, Ellipse, Triangle]) -> Number: The area of ​​c.",
        "TangentPoint": "TangentPoint(l: Line, c: Circle) -> Point: The point on c where the line l is tangent to the curve c.",
        "TangentOfPoint": "TangentOfPoint(p: Point, c: Curve) -> Line: The tangent line of the curve c through the point p.",
        "TangentOnPoint": "TangentOnPoint(p: Point, c: Curve) -> Line: The tangent line of the curve c through the point p on the curve c.",
        "OneOf": "OneOf(s: Set[T]) -> T: Get an element in the set s.",
        "Abs": "Abs(n: Union[Number, LineSegment]) -> Number: The absolute value of n.",
        "lg": "lg(n: Number) -> Number: The log value of n.",
        "InterReciprocal": "InterReciprocal(n: Number) -> Number: The reciprocal of n.",
        "sqrt": "sqrt(n: Number) -> Number: The square root of n.",
        "Max": "Max(n: Number) -> Number: The maximum value of n.",
        "Min": "Min(n: Number) -> Number: The minimum value of n.",
        "Range": "Range(n: Number) -> (Number, Number): The range of values ​​of n.",
        "WhenMin": "WhenMin(n: Number): When n takes its minimum value.",
        "WhenMax": "WhenMax(n: Number): When n takes its maximum value.",
        "ApplyUnit": "ApplyUnit(n: Number, u: Union[degree, rad]): The value in units of n and u.",
        "In": "In(n: Number, (r1: Number, r2: Number)): The value of n is in the interval (r1,r2).",
        "Between": "Between(p1: Point, p2: Point, p3: Point): Point p1 is between points p2 and p3.",
        "IsIntersect": "IsIntersect(a: Union[Axis, Curve], b: Union[axis, Curve]): a intersects with b.",
        "Negation": "Negation(a: Assertion): Asserts that the logical expression a is not true.",
        "And": "And(a: Assersion, b: Assertion): Assert that logical expressions a and b are both true.",
        "PointOnCurve": "PointOnCurve(p: Point, c: Union[Axis, Curve]): Point p is on c.",
        "IsOutTangent": "IsOutTangent(c1: Circle, c2: Circle): Circle c1 is circumscribed with circle c2.",
        "IsInTangent": "IsInTangent(c1: Circle, c2: Circle): Circle c1 is inscribed with circle c2.",
        "IsCircumCircle": "IsCircumCircle(c: Circle, t: Triangle): Circle c is the circumscribed circle of triangle t.",
        "IsInscribedCircle": "IsInscribedCircle(c: Circle, t: Triangle): Circle c is the inscribed circle of triangle t.",
        "IsTangent": "IsTangent(l: Line, c: ConicSection): Line l is a tangent of conic section c.",
        "IsChordOf": "IsChordOf(l: LineSegment, c: ConicSection): Line segment l is a chord of conic section c.",
        "IsDiameter": "IsDiameter(l: LineSegment, c: Circle): Line segment l is the diameter of circle c.",
        "IsParallel": "IsParallel(l1: Union[Line, LineSegment, xAxis, yAxis], l2: Union[Line, LineSegment, xAxis, yAxis]): l1 and l2 are parallel to each other.",
        "IsPerpendicular": "IsPerpendicular(l1: Union[Line, LineSegment, xAxis, yAxis], l2: Union[Line, LineSegment, xAxis, yAxis]): l1 and l2 are perpendicular to each other.",
        "Cos": "Cos(a: Angle) -> Number: The cosine value of angle a.",
        "Sin": "Sin(a: Angle) -> Number: The sine value of angle a."
}